# functional lists: infinite list
# This uses a functional representation of lists: the functions for head and tail (hd and tl) return abort if their argument is an empty list. The abort supercombinator 
# just generates an infinite loop. cons is used to cons-truct a list and nil is the empty list

cons a b cc cn = cc a b;
nil cc cn = cn;
hd list = list K abort;
tl list = list K1 abort;
abort = abort;

infinite x = cons x (infinite x);
main = hd (tl (infinite 2))