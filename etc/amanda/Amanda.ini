|| amanda.ini, Dick Bruin

|| MemorySize  = 200000
|| WinFontName = "Courier New"
|| WinFontSize = 10
|| ConPrompt   = "> "

rep:: * -> num -> [*]

rep x n = [x | k <- [1..n]]


cjustify:: num -> [char] -> [char]

cjustify n str = rep ' ' (s / 2) ++ str ++ rep ' ' (s - s / 2)
where
  s = n - # str


ljustify:: num -> [char] -> [char]

ljustify n str = str ++ rep ' ' (n - # str)


rjustify:: num -> [char] -> [char]

rjustify n str = rep ' ' (n - # str) ++ str


lines:: [char] -> [[char]]

lines [] = []
lines string = first : lines (drop 1 rest)
where
  (first, rest) = splitwhile ('\n' ~=) string


unlines:: [[char]] -> [char]

unlines lines = [ch | line <- lines; ch <- line ++ "\n"]


words:: [char] -> [[char]]

words [] = []
words string = first : words (dropwhile isspace rest)
where
  (first, rest) = (splitwhile (~ . isspace) . dropwhile isspace) string


isspace:: char -> bool

isspace ch = ch = ' ' \/ ch = '\n' \/ ch = '\t'


isupper:: char -> bool

isupper ch = ch >= 'A' /\ ch <= 'Z'


islower:: char -> bool

islower ch = ch >= 'a' /\ ch <= 'z'


toupper:: char -> char

toupper ch = decode (code ch + code 'A' - code 'a') ,if islower ch
           = ch                                     ,otherwise


tolower:: char -> char

tolower ch = decode (code ch + code 'a' - code 'A') ,if isupper ch
           = ch                                     ,otherwise


nodup:: [*] -> [*]

nodup (h:t) = h : nodup (filter (h ~=) t)
nodup l     = l


sort:: [*] -> [*]

sort (h:t) = sort [u | u <- t; u < h] ++ [h] ++ sort [u | u <- t; u >= h]
sort l     = []


transpose:: [[*]] -> [[*]]

transpose x = []                              ,if empty x \/ or(map empty x)
            = map hd x : transpose (map tl x) ,otherwise


mergeSort:: [*] -> [*]

mergeSort list
= list ,if half < 1
= merge (mergeSort(take half list)) (mergeSort(drop half list))
where
  half = (# list) / 2


merge:: [*] -> [*] -> [*]

merge (l1=h1:t1) (l2=h2:t2) = h1 : merge t1 l2 ,if h1 < h2
                            = h2 : merge l1 t2 ,otherwise
merge [] l2                 = l2
merge l1 []                 = l1


zipwith :: (* -> ** -> ***) -> [*] -> [**] -> [***]

zipwith (+) xs ys = [x + y | x, y <- xs, ys]


#synonym div /
#synonym mod %

|| graphics protocol

graphics ::= GraphText num (num, num) [char] 
           | GraphPolyLine num [(num, num)] 
           | GraphPolygon num [(num, num)] 
           | GraphRectangle num (num, num) (num, num)
           | GraphEllipse num (num, num) (num, num)
           | GraphDisc num (num, num) (num, num)
           | GraphWait num

graphicsout:: [graphics] -> [[char]]

graphicsout = concat.map graphicsToString

graphicsToString (GraphText color (x, y) text)            = ["GraphText", itoa color] ++ coordsToString (x, y) ++ [text]
graphicsToString (GraphPolyLine color ps)                 = ["GraphPolyLine", itoa color] ++ concat[coordsToString (x, y) | (x, y) <- ps] ++ ["End"]
graphicsToString (GraphPolygon color ps)                  = ["GraphPolygon", itoa color] ++ concat[coordsToString (x, y) | (x, y) <- ps] ++ ["End"]
graphicsToString (GraphRectangle color (x1, y1) (x2, y2)) = ["GraphRectangle", itoa color] ++ coordsToString (x1, y1) ++ coordsToString (x2, y2)
graphicsToString (GraphEllipse color (x1, y1) (x2, y2))   = ["GraphEllipse", itoa color] ++ coordsToString (x1, y1) ++ coordsToString (x2, y2)
graphicsToString (GraphDisc color (x1, y1) (x2, y2))      = ["GraphDisc", itoa color] ++ coordsToString (x1, y1) ++ coordsToString (x2, y2)
graphicsToString (GraphWait msecs)                        = ["GraphWait", itoa msecs]

coordsToString (x, y) = [ftoa x, ftoa y]

graphAnimate :: num -> num -> [graphics] -> bool

graphAnimate w h gs = graphdisplay (["GraphOpen", itoa w, itoa h] ++ graphicsout gs ++ ["GraphWait", "0"])
